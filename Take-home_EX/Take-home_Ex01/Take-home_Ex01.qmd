---
title: "Take-home Exercise 1: Armed Conflict in Myanmar"
author: "Fan Syong Yue"
date: 09/09/24
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

# Introduction

Millions of people have their lives shattered by armed conflict – wars – every year.

Armed conflict has been on the rise since about 2012, after a decline in the 1990s and early 2000s. First came conflicts in Libya, Syria and Yemen, triggered by the 2011 Arab uprisings. Libya’s instability spilled south, helping set off a protracted crisis in the Sahel region. A fresh wave of major combat followed: the 2020 Azerbaijani-Armenian war over the Nagorno-Karabakh enclave, horrific fighting in Ethiopia’s northern Tigray region that began weeks later, the conflict prompted by the Myanmar army’s 2021 power grab and Russia’s 2022 assault on Ukraine. Add to those 2023’s devastation in Sudan and Gaza. Around the globe, more people are dying in fighting, being forced from their homes or in need of life-saving aid than in decades.

Source: [10 Conflicts to Watch in 2024](https://www.crisisgroup.org/global/10-conflicts-watch-2024)

In this article, we are going to be primarily focusing on the ongoing Myanmar Civil War which started in 2021. This civil war comes after Myanmar's long history of insurgencies post independence from British Rule. It had escalated significantly after the 2021 coup d'état on 1 February 2021 which saw the **Tatmadaw** (Myanmar's Military) overthrow the ruling party at the time.

# Objective

We want to apply spatial point patterns analysis methods to discover the spatial and spatio-temporal distribution of armed conflict in Myanmar.

# Packages

We will be using the following packages:

-   sf
-   tmap
-   tidyverse
-   sp
-   raster
-   spatstat
-   sparr

```{r}
pacman::p_load(sf, tmap, tidyverse, sp, raster, spatstat, sparr)
```

# Data

To achieve our objective, we will be using the following datasets

-   Armed conflict data of Myanmar between 2021-2024 from [Armed Conflict Location & Event Data (ACLED)](https://acleddata.com/)

-   [Geospatial data](http://geonode.themimu.info/layers/?limit=100&offset=0) on [Myanmar Information Management Unit, MIMU](http://www.themimu.info/)

-   [OpenStreetMap](https://download.geofabrik.de/asia/myanmar.html) of Myanmar

## Import

We first want to load in the conflict data ranging from 2021-2024

```{r}
conflict2124_sf <- read_csv("data/2021-01-01-2024-06-30-Myanmar.csv") %>%
  st_as_sf(coords = c("longitude", "latitude"),
           crs = 4326) %>%
  st_transform(crs = 32647)
```

We also want to import our shapefile of administrative area 1

```{r}
madm1_sf <- st_read(dsn = "data/geospatial", layer = "mmr_polbnda2_adm1_250k_mimu_1") %>%
  st_transform(crs = 32647)
```

Finally, we have the data from OpenStreetMap where we will focus on roads
```{r}
osm_roads_sf <- st_read("data/geospatial/myanmar-latest-free.shp",
                      layer="gis_osm_roads_free_1") %>%
  st_transform(crs = 32647)
```

## Wrangling

### Conflict Data
We also want to add a column called `quarter` on our `conflict2124_sf` dataset to help when breaking down the data into yearly quarters. We will achieve this through the `quarter()` function from `lubridate`.

```{r}
conflict2124_sf <- conflict2124_sf %>% 
  mutate(event_date = dmy(event_date),quarter = quarter(event_date))
```
### Administrative Area 1
We first want to rename our states from `myanmaradm1` to have the same naming scheme as `conflict2124`

```{r}
madm1_sf$ST <- gsub("\\s*\\(([^)]+)\\)", "-\\1", madm1_sf$ST)
```
### OpenStreetMap
With the OSM dataset being so large, we want to cut down on the dataset to only data that would be useful for our exploration. Let's first look at the different types of roads available from our dataset by finding the unique values in the `fclass` column

```{r}
unique(osm_roads_sf$fclass)
```

We can now cut out the road types that are irrelevant to us and also remove unnecessary columns

```{r}
roads_to_keep <- c("primary", "secondary", "tertiary", "trunk", "unclassified", 
                   "track", "military", "footway", "bridge", "border")


osm_roads_sf <- osm_roads_sf %>%
  filter(fclass %in%  roads_to_keep) %>%
  dplyr::select("osm_id", "fclass", "geometry")
```

```{r}
summary(osm_roads_sf)
```

### Joining Geospatial Data

We now want to combine both our geospatial datasets
```{r}
#| eval: false
myanmar_merged <- st_intersection(osm_roads_sf, madm1_sf)
```

```{r}
#| eval: false
summary(myanmar_merged)
```
Let's now save this data


```{r}
#| eval: false
write_rds(myanmar_merged, "data/rds/myanmar_merged.rds")
```

```{r}
myanmar_merged_sf <- read_rds("data/rds/myanmar_merged.rds") %>%
  st_as_sf(coords = c("longitude", "latitude"), crs = 32647)
```

```{r}
summary(myanmar_merged_sf)
```

Finally, let's turn this into 

### Visualisation

We can first view the basemap of myanmar and its conflicts data combined through the use of `tmap` methods split year on year
```{r}
tm_shape(madm1_sf) +
  tm_polygons() +
  tm_shape(conflict2124_sf) +
  tm_dots() +
  tm_facets(by="year",
              free.coords = FALSE,
              drop.units = TRUE)
```

At a glance, we can see intense conflicts in years 2021 and 2022 which slowly decreased over time in years 2023 and 2024. This lines up with the timeline in which the military overthrew the ruling government which would liekly lead to higher rates of conflict. As time went on, these conflicts would decrease as the military would be actively taking down any opposition forces. As we do not have the full year of 2024, we are unable to determine a further decrease.

### PPP
As we will be looking at KDE data, we want to convert our conflict data into `PPP` objects


```{r}
conflict2124_ppp <- conflict2124_sf %>% {as.ppp(st_coordinates(.), st_bbox(.))}
```
```{r}
summary(conflict2124_ppp)
```

Let's first create an object to store all our split data called `conflict2124_ppp_list` and add in the years we want to look at

```{r}
conflict2124_ppp_list <- list(
  "2021" = list(
    "Q1" = list(),
    "Q2" = list(),
    "Q3" = list(),
    "Q4" = list()
  ),
  "2022" = list(
    "Q1" = list(),
    "Q2" = list(),
    "Q3" = list(),
    "Q4" = list()
  ),
  "2023" = list(
    "Q1" = list(),
    "Q2" = list(),
    "Q3" = list(),
    "Q4" = list()
  ),
  "2024" = list(
    "Q1" = list(),
    "Q2" = list(),
    "Q3" = list(),
    "Q4" = list()
  )
)
```
We now want to assign our filtered quarter data into each of the years

```{r}
for (targetyear in 2021:2024) {
  for (targetquarter in 1:4) {
    quarter_name <- paste0("Q", targetquarter)
    filtered_data <- conflict2124_sf %>%
      filter(year == as.character(targetyear) & quarter == as.character(targetquarter))
    
    if (nrow(filtered_data) > 0) {
      conflict2124_ppp_list[[as.character(targetyear)]][[quarter_name]] <- as.ppp(st_coordinates(filtered_data), st_bbox(filtered_data))
    }
  }
}
```


#### Deduplication
As we get a warning of duplicated points, we should aim to remove as many as possible. Let's first find out how many duplicated points we have through the use of `sum()` and `multiplicity()`.
```{r}
sum(multiplicity(conflict2124_ppp) > 1)
```

Let's now remove these points using `rjitter()` to shift our points slightly.
```{r}
conflict2124_ppp <- rjitter(conflict2124_ppp, 
                             retry=TRUE, 
                             nsim=1, 
                             drop=TRUE)
```

We can now use `any()` and `duplicated()` to check if there are still duplicated points

```{r}
any(duplicated(conflict2124_ppp))
```

We want to repeat this with the values in our ppp_list too

```{r}
for (year in names(conflict2124_ppp_list)) {
  for (quarter in names(conflict2124_ppp_list[[year]])) {
    ppp_obj <- conflict2124_ppp_list[[year]][[quarter]]
    if (class(ppp_obj) == "ppp") {
      # Apply rjitter() to the ppp_obj
      jittered_ppp <- rjitter(ppp_obj, retry = TRUE, nsim = 1, drop = TRUE)
      
      # Assign the jittered ppp object back to the list
      conflict2124_ppp_list[[year]][[quarter]] <- jittered_ppp
      print(any(duplicated(conflict2124_ppp_list[[year]][[quarter]])))
    }
  }
}
```

### Owin
We also want to create an `owin` object to ensure that all points we are looking at are within the Myanmar boundary.
```{r}
madm1_owin <- as.owin(madm1_sf)
```

```{r}
plot(madm1_owin)
```

Now let's combine this with our conflict data

```{r}
conflict2124_ppp_list <- lapply(conflict2124_ppp_list, function(year_data_list) {
  lapply(year_data_list, function(quarter_data) {
    if (class(quarter_data) == "ppp")
      quarter_data[madm1_owin]
  })
})
```

```{r}
plot(conflict2124_ppp_list$"2024"$Q1)
```

```{r}
plot(conflict2124_ppp_list$"2024"$Q2)
```

# Quarterly KDE
Now let's view the quarterly KDE for our data. However, we first need to rescale our data to use KM.

```{r}
conflict2124_ppp_list.km <- lapply(conflict2124_ppp_list, function(year_data_list) {
  lapply(year_data_list, function(quarter_data) {
    if (class(quarter_data) == "ppp")
      rescale.ppp(quarter_data, 1000, "km")
  })
})
```
We now want to find the ideal bandwith to use for our data

## Automatic Bandwith
Let's first compare using the bandwith functions of `diggle`, `CvL`, `ppl`, `scott`, 

::: panel-tabset
### bw.diggle

```{r}
conflict.bw <- density(conflict2124_ppp_list.km$"2021"$Q1,
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```
### bw.CvL

```{r}
conflict.bw <- density(conflict2124_ppp_list.km$"2021"$Q1,
             sigma=bw.CvL, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```

### bw.ppl

```{r}
conflict.bw <- density(conflict2124_ppp_list.km$"2021"$Q1,
             sigma=bw.ppl, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```

### bw.scott

```{r}
conflict.bw <- density(conflict2124_ppp_list.km$"2021"$Q1,
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```
:::

## Manual Bandwith
We can also look at how our KDE will look with some manual values

::: panel-tabset
### Signma 10
```{r}
conflict.bw <- density(conflict2124_ppp_list.km$"2021"$Q1,
             sigma=10, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```
### Signma 20
```{r}
conflict.bw <- density(conflict2124_ppp_list.km$"2021"$Q1,
             sigma=20, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```
### Signma 30
```{r}
conflict.bw <- density(conflict2124_ppp_list.km$"2021"$Q1,
             sigma=30, 
             edge=TRUE, 
             kernel="gaussian")
plot(conflict.bw)
```
:::

When looking at the results, `scott` looks to give the best results. So for the next portions we will be using that.

::: panel-tabset
### 2021

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2))
plot(density(conflict2124_ppp_list.km$"2021"$Q1, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2021 Q1")
plot(density(conflict2124_ppp_list.km$"2021"$Q2, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2021 Q2")
plot(density(conflict2124_ppp_list.km$"2021"$Q3, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2021 Q3")
plot(density(conflict2124_ppp_list.km$"2021"$Q4, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2021 Q4")
```


### 2022

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2))
plot(density(conflict2124_ppp_list.km$"2022"$Q1, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2022 Q1")
plot(density(conflict2124_ppp_list.km$"2022"$Q2, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2022 Q2")
plot(density(conflict2124_ppp_list.km$"2022"$Q3, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2022 Q3")
plot(density(conflict2124_ppp_list.km$"2022"$Q4, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2022 Q4")
```


### 2023

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2))
plot(density(conflict2124_ppp_list.km$"2023"$Q1, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2023 Q1")
plot(density(conflict2124_ppp_list.km$"2023"$Q2, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2023 Q2")
plot(density(conflict2124_ppp_list.km$"2023"$Q3, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2023 Q3")
plot(density(conflict2124_ppp_list.km$"2023"$Q4, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2023 Q4")
```


### 2024

```{r}
#| fig-width: 20
#| fig-height: 18
par(mfrow=c(2,2))
plot(density(conflict2124_ppp_list.km$"2024"$Q1, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2024 Q1")
plot(density(conflict2124_ppp_list.km$"2024"$Q2, 
             sigma=bw.scott, 
             edge=TRUE, 
             kernel="gaussian"), 
     main="2024 Q2")
```
:::

