---
title: "Hands-on Exercise 5: Spatial Weights and Applications"
author: "Fan Syong Yue"
date: 09/14/24
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

# Spatial Weights and Applications

## Data

We will be using 2 data sets for this exercise

-   Hunan county boundary layer. This is a geospatial data set in ESRI shapefile format.
-   Hunan_2012.csv: This csv file contains selected Hunan’s local development indicators in 2012.

## Packages

We will be using the following packages:

-   sf
-   spdep
-   tmap
-   tidyverse
-   knitr

```{r}
pacman::p_load(sf, spdep, tmap, tidyverse, knitr)
```

## Data

### Importing the Data

```{r}
hunan  <- st_read(dsn = "data/geospatial", layer = "Hunan")
```

```{r}
hunan2012 <- read_csv("data/aspatial/Hunan_2012.csv")
```

### Joining the Data

We want to combine the data to update the `hunan` SpatialPolygonsDataFrame with the attribute fields of `hunan2012`

```{r}
hunan <- left_join(hunan,hunan2012)%>%
  select(1:4, 7, 15)
```

## Visualising Regional Development Indicator

We first want to visualise the data using the basemap and choropleth map distribution of GDPPC 2012 using `qtm()` from `tmap`

```{r}
basemap <- tm_shape(hunan) +
  tm_polygons() +
  tm_text("NAME_3", size=0.5)

gdppc <- qtm(hunan, "GDPPC")
tmap_arrange(basemap, gdppc, asp=1, ncol=2)
```

## Computing Contiguity Spatial Weights

To achieve this, we will use the `poly2nb()` function from `spdep` to compute contiguity weight matrices for the study area. This function builds a neighbours list based on regions with contiguous boundaries. A “queen” argument can be passed in that takes TRUE or FALSE as options. If you do not specify this argument the default is set to TRUE, that is, if you don’t specify queen = FALSE this function will return a list of first order neighbours using the Queen criteria.

### Computing (QUEEN) contiguity based neighbours

We will now compute the Queen contiguity weight matrix

```{r}
wm_q <- poly2nb(hunan, queen=TRUE)
summary(wm_q)
```

The data indicates that Hunan consists of 88 area units. The most connected unit has 11 neighbouring areas, while two units each have only one neighboring area.

`wm_q` can now be used to list all neighbouring polygons. Let's look at the first polygon in the object.

```{r}
wm_q[[1]]
```

Polygon 1 has 5 neighbors. The numbers represent the polygon IDs as stored in hunan SpatialPolygonsDataFrame class.

To view the county name of polygon 1, we can use the following code

```{r}
hunan$County[1]
```

We can also reveal the name of the five neighbouring polygons

```{r}
hunan$County[c(2,3,4,57,85)]
```

We can now retrieve the GDPPC of the five counties

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```

We can also display the complete weight matrix with the following code

```{r}
str(wm_q)
```

### Computing (ROOK) contiguity based neighbours

We will now compute the Rook contiguity weight matrix

```{r}
wm_r <- poly2nb(hunan, queen=FALSE)
summary(wm_r)
```

The data indicates that Hunan consists of 88 area units. The most connected unit has 10 neighbouring areas, while two units each have only one neighboring area.

### Visualising contiguity weights

To create a connectivity graph, we need points to represent each polygon. The most common way to get these points is by calculating polygon centroids. We'll do this using the `sf` package before moving on to graph creation.

To extract latitude and longitude from the centroids, we'll use the `st_centroid()` function on the geometry column of the `us.bound` object. Since we need the coordinates in a separate data frame, we'll use a mapping function from the `purrr` package. Specifically, we'll use `map_dbl()` to apply `st_centroid()` and extract the longitude (the first value) using \[\[1\]\].

```{r}
longitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[1]])
```

For latitude, we access the 2nd value of each centroid

```{r}
latitude <- map_dbl(hunan$geometry, ~st_centroid(.x)[[2]])
```

We now combine the coordinates into the same object and view them

```{r}
coords <- cbind(longitude, latitude)
head(coords)
```

#### Plotting the contiguity based neighbours map

##### Queen

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
```

##### Rook

```{r}
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

##### Both

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="Queen Contiguity")
plot(wm_q, coords, pch = 19, cex = 0.6, add = TRUE, col= "red")
plot(hunan$geometry, border="lightgrey", main="Rook Contiguity")
plot(wm_r, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Computing distance based neighbours

To achieve this, we will use `dnearneigh()` from the `spdep` package.

This function identifies neighbours of region points by Euclidean distance with a distance band with lower d1= and upper d2= bounds controlled by the bounds= argument. If unprojected coordinates are used and either specified in the coordinates object x or with x as a two column matrix and longlat=TRUE, great circle distances in km will be calculated assuming the WGS84 reference ellipsoid.

### Determining cut-off distance

We first need to determine the upper limit for distance band by using the following steps:

-   Getting a matrix of the indices of points from the set of the k-nearest neighbors using `dnearneigh()`
-   Convert the matrix into a neighbors list of nb class using `knn2nb()`
-   Use `nbdists()` to get the length of neighbor relationship edges. If projected, return coordinate pairs, else km,
-   Remove the list structure using `unlist()`

```{r}
k1 <- knn2nb(knearneigh(coords))
k1dists <- unlist(nbdists(k1, coords, longlat = TRUE))
summary(k1dists)
```

The summary report shows that the largest first nearest neighbour distance is 61.79 km, so using this as the upper threshold gives certainty that all units will have at least one neighbour.

### Computing final distance weight matrix

We can now use `dnearneigh()` to compute the distance weight matrix

```{r}
wm_d62 <- dnearneigh(coords, 0, 62, longlat = TRUE)
wm_d62
```

This shows us that each of the 88 counties are connected to 3.68 other counties on average

We can also view the weight matrix directly

```{r}
str(wm_d62)
```

We could alternatively use the `table()` and `card()` functions of `spdep` to display this structure

```{r}
table(hunan$County, card(wm_d62))
```

```{r}
n_comp <- n.comp.nb(wm_d62)
n_comp$nc
```

```{r}
table(n_comp$comp.id)
```

With this, we can see that there are no isolated counties and the graph is completely connected.

#### Plotting fixed distance weight matrix

We can now plot the distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(wm_d62, coords, add=TRUE)
plot(k1, coords, add=TRUE, col="red", length=0.08)
```

The red lines show the links of 1st nearest neighbours and the black lines show the links of neighbours within the cut-off distance of 62km.

We could also plot them next to each other instead of on the same graph

```{r}
par(mfrow=c(1,2))
plot(hunan$geometry, border="lightgrey", main="1st nearest neighbours")
plot(k1, coords, add=TRUE, col="red", length=0.08)
plot(hunan$geometry, border="lightgrey", main="Distance link")
plot(wm_d62, coords, add=TRUE, pch = 19, cex = 0.6)
```

### Computing adaptive distance weight matrix

One of the characteristics of fixed distance weight matrix is that more densely settled areas (usually the urban areas) tend to have more neighbours and the less densely settled areas (usually the rural counties) tend to have lesser neighbours. Having many neighbours smoothes the neighbour relationship across more neighbours.

It is possible to control the numbers of neighbours directly using k-nearest neighbours, either accepting asymmetric neighbours or imposing symmetry.

```{r}
knn6 <- knn2nb(knearneigh(coords, k = 6))
knn6
```

We can also display the content of this matrix

```{r}
str(knn6)
```

This shows that each county has 6 neightbours.

#### Plotting distance based neighbours

We now want to plot the distance weight matrix

```{r}
plot(hunan$geometry, border="lightgrey")
plot(knn6, coords, pch = 19, cex = 0.6, add = TRUE, col = "red")
```

## Weights based on Inverse Distance Weighting

IDW is a type of deterministic interpolation method used to estimate values at unsampled locations based on the values of nearby sampled points.

We will first compute the distances between areas by using `nbdists()` of `spdep`

```{r}
dist <- nbdists(wm_q, coords, longlat = TRUE)
ids <- lapply(dist, function(x) 1/(x))
ids
```

## Row-standardised Weights Matrix

To assign weights to each neighbouring polygon, we'll use equal weights with `style = "W"`. This means each neighbouring polygon is assigned a weight of ( `1/(# of neighbours)` ), and we sum the weighted values.

While this method is intuitive, it has a drawback: polygons at the edges of the study area have fewer neighbours, which can lead to over- or underestimation of spatial autocorrelation. For simplicity, we'll use `style = "W"`, but other robust options, such as `style = "B"`, are available.

```{r}
rswm_q <- nb2listw(wm_q, style="W", zero.policy = TRUE)
rswm_q
```

The zero.policy=TRUE option allows for lists of non-neighbours. This should be used with caution since the user may not be aware of missing neighbors in their dataset however, a zero.policy of FALSE would return an error.

To see the weight of the first polygon’s eight neighbours type:

```{r}
rswm_q$weights[10]
```
Each neighbour is assigned a 0.125 of the total weight. This means that when R computes the average neighbouring income values, each neighbour’s income will be multiplied by 0.125 before being tallied.

Using the same method, we can also derive a row standardised distance weight matrix

```{r}
rswm_ids <- nb2listw(wm_q, glist=ids, style="B", zero.policy=TRUE)
rswm_ids
```

We can now view the weights


```{r}
rswm_ids$weights[1]
```



```{r}
summary(unlist(rswm_ids$weights))
```

## Application of Spatial Weight Matrix
We can create four different spatial lagged variables

-   spatial lag with row-standardized weights
-   spatial lag as a sum of neighbouring values
-   spatial window average
-   spatial window sum

### Spatial lag with row-standardized weights
We can compute the average neighbor GDPPC value for each polygon

```{r}
GDPPC.lag <- lag.listw(rswm_q, hunan$GDPPC)
GDPPC.lag
```

```{r}
nb1 <- wm_q[[1]]
nb1 <- hunan$GDPPC[nb1]
nb1
```
We can append the spatially lagged GDPPC values onto the `hunan` sf data frame

```{r}
lag.list <- list(hunan$NAME_3, lag.listw(rswm_q, hunan$GDPPC))
lag.res <- as.data.frame(lag.list)
colnames(lag.res) <- c("NAME_3", "lag GDPPC")
hunan <- left_join(hunan,lag.res)
```

The following table shows the average neighboring income values (stored in the Inc.lag object) for each county

```{r}
head(hunan)
```

We can now plot both the GDPPC and spatial lag GDPPC for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_gdppc <- qtm(hunan, "lag GDPPC")
tmap_arrange(gdppc, lag_gdppc, asp=1, ncol=2)
```

### Spatial lag as a sum of neighboring values
We can calculate spatial lag as a sum of neighbouring values by assigning binary weights. This requires us to go back to our neighbours list, then apply a function that will assign binary weights, then we use `glist =` in the `nb2listw()` function to explicitly assign these weights.

We start by applying a function that will assign a value of 1 per each neighbour. This is done with `lapply()`, which we have been using to manipulate the neighbours structure throughout the past notebooks. Basically it applies a function across each value in the neighbors structure.

```{r}
b_weights <- lapply(wm_q, function(x) 0*x + 1)
b_weights2 <- nb2listw(wm_q, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```
With the proper weights assigned, we can use lag.listw to compute a lag variable from our weight and GDPPC

```{r}
lag_sum <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
lag.res <- as.data.frame(lag_sum)
colnames(lag.res) <- c("NAME_3", "lag_sum GDPPC")
```

We can now view the result

```{r}
lag_sum
```

We will append the `lag_sum GDPPC` field into `hunan` sf data frame

```{r}
hunan <- left_join(hunan, lag.res)
```

We can now plot both the GDPPC and Spatial Lag Sum GDPPC for comparison

```{r}
gdppc <- qtm(hunan, "GDPPC")
lag_sum_gdppc <- qtm(hunan, "lag_sum GDPPC")
tmap_arrange(gdppc, lag_sum_gdppc, asp=1, ncol=2)
```

### Spatial window average
The spatial window average uses row-standardised weights and includes the diagonal element.

We can use `include.self()` from `spdep` to add the diagonal element to the neighbour list

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

Let's look at neighbour list of area [1]

```{r}
wm_qs[[1]]
```
[1] now has 6 neighbors from 5

Now we obtain weights with `nb2listw()`

```{r}
wm_qs <- nb2listw(wm_qs)
wm_qs
```
Again, we use `nb2listw()` and `glist()` to explicitly assign weight values.

Lastly, we just need to create the lag variable from our weight structure and GDPPC variable


```{r}
lag_w_avg_gpdpc <- lag.listw(wm_qs, 
                             hunan$GDPPC)
lag_w_avg_gpdpc
```

We will now convert the lag variable `listw` object into a data.frame by using `as.data.frame()`

```{r}
lag.list.wm_qs <- list(hunan$NAME_3, lag.listw(wm_qs, hunan$GDPPC))
lag_wm_qs.res <- as.data.frame(lag.list.wm_qs)
colnames(lag_wm_qs.res) <- c("NAME_3", "lag_window_avg GDPPC")
```

Now we append lag_window_avg GDPPC values onto `hunan` sf data.frame by using `left_join()` of `dplyr` package

```{r}
hunan <- left_join(hunan, lag_wm_qs.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of `Knitr` package is used to prepare a table

```{r}
hunan %>%
  select("County", 
         "lag GDPPC", 
         "lag_window_avg GDPPC") %>%
  kable()
```

Lastly, `qtm()` of tmap package is used to plot the `lag_gdppc` and `w_avg_gdppc` maps next to each other for quick comparison

```{r}
w_avg_gdppc <- qtm(hunan, "lag_window_avg GDPPC")
tmap_arrange(lag_gdppc, w_avg_gdppc, asp=1, ncol=2)
```

### Spatial window sum
The spatial window sum is the counter part of the window average, but without using row-standardised weights

We can use `include.self()` from `spdep` to add the diagonal element to the neighbour list

```{r}
wm_qs <- include.self(wm_q)
wm_qs
```

We now assign binary weights to the neighbour structure that includes the diagonal element

```{r}
b_weights <- lapply(wm_qs, function(x) 0*x + 1)
b_weights[1]
```

[1] now has 6 neighbors from 5

We use `nb2listw()` and `glist()` to explicitly assign weight values

```{r}
b_weights2 <- nb2listw(wm_qs, 
                       glist = b_weights, 
                       style = "B")
b_weights2
```

Now compute the lag variable with `lag.listw()`

```{r}
w_sum_gdppc <- list(hunan$NAME_3, lag.listw(b_weights2, hunan$GDPPC))
w_sum_gdppc
```

We will now convert the lag variable `listw` object into a data.frame by using `as.data.frame()`

```{r}
w_sum_gdppc.res <- as.data.frame(w_sum_gdppc)
colnames(w_sum_gdppc.res) <- c("NAME_3", "w_sum GDPPC")
```

Now we append w_sum GDPPC values onto `hunan` sf data.frame by using `left_join()` of `dplyr` package

```{r}
hunan <- left_join(hunan, w_sum_gdppc.res)
```

To compare the values of lag GDPPC and Spatial window average, `kable()` of `Knitr` package is used to prepare a table

```{r}
hunan %>%
  select("County", "lag_sum GDPPC", "w_sum GDPPC") %>%
  kable()
```

Lastly, `qtm()` of tmap package is used to plot the `lag_sum GDPPC` and `w_sum_gdppc` maps next to each other for quick comparison


```{r}
w_sum_gdppc <- qtm(hunan, "w_sum GDPPC")
tmap_arrange(lag_sum_gdppc, w_sum_gdppc, asp=1, ncol=2)
```