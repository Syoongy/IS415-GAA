---
title: "Hands-on Exercise 1"
author: "Fan Syong Yue"
date: 08/15/24
---

# Getting Started

## Install and launching R packages

The code chunk below uses p_load() of pacman package to check if tidyverse packages are installed in the computer. If they are, then they will be launched in R.

```{r}
#| echo: false
pacman::p_load(sf, tidyverse)
```

# Importing the data

We first import our Master Plan 2014 Subzone Boundary, Cycling Path and Preschool data

```{r}
mpsz = st_read(dsn="data/geospatial",
                layer="MP14_SUBZONE_WEB_PL")

cyclingpath = st_read(dsn = "data/geospatial", 
                         layer = "CyclingPathGazette")

preschool = st_read("data/geospatial/PreSchoolsLocation.kml")
```

# Simple feature data frames

We now want to look at some basic ways to explore the content of a simple data frame. We will be using the mpsz variable for this.

We shall first look at basic information through the use of `st_geometry()`

```{r}
st_geometry(mpsz)
```

Next, we shall try out `glimpse()` to find out more about the associated attributes

```{r}
glimpse(mpsz)
```

Finally, to get the complete information of the feature object, we shall use `head()`

```{r}
head(mpsz, n=5)
```

# Plotting the geospatial data

We shall first try plotting it in the simplest way possible using `plot()`

```{r}
plot(mpsz)
```

If we want to look at only the geometry, we can combine this with `st_geometry()`

```{r}
plot(st_geometry(mpsz))
```

We can also plot the area using only a specific attribute

```{r}
plot(mpsz["PLN_AREA_N"])
```

# Using Projection

We now want to ensure that both our mpsz and preschool variables are using the same coordinate system. When looking at `mpsz` using `st_crs()`

```{r}
st_crs(mpsz)
```

We can see that the data is projected as svy21 which should have a EPSG code of 3414. However, the end of print indicates an EPSG of 9001.

To fix this, we shall assign a new variable with the correct EPSG.

```{r}
 mpsz3414 <- st_set_crs(mpsz, 3414)
```

When checking it now

```{r}
st_crs(mpsz3414)
```

We can see the correct 3414 EPSG code

## Converting our Preschool Data

We want to first check the coordinate system of our preschool data

```{r}
st_geometry(preschool)
```

We can see that it uses the WGS84 system. We want to project this data into the syv21 system that our `mpsz3414` variable uses.

```{r}
preschool3414 <- st_transform(preschool, 
                              crs = 3414)
```

We can now check if it is using the new system

```{r}
st_geometry(preschool3414)
```

# Aspatial Data

## Importing our data

We first want to import our aspatial listing data from AirBNB

```{r}
listings <- read_csv("data/aspatial/listings.csv")
```

We can now view the data using `list()`

```{r}
list(listings)
```

We assume the data uses the `wgs84` Geographic Coordinate System

## Data frame for our aspatial data

We now want to convert the listing data into the `svy21` system that we have previously used.

```{r}
listings_sf <- st_as_sf(listings, 
                       coords = c("longitude", "latitude"),
                       crs=4326) %>%
  st_transform(crs = 3414)
```

And when viewing the data now

```{r}
glimpse(listings_sf)
```

We can see that geometry has been added while longitude and latitude have been dropped

# Geoprocessing using `sf`

## Buffering

### Scenario

The authority is planning to upgrade the exiting cycling path. To do so, they need to acquire 5 metres of reserved land on the both sides of the current cycling path. You are tasked to determine the extend of the land need to be acquired and their total area.

### Solution

We first want to use `st_buffer()` and compute 5-meter buffers around paths from our cycling data

```{r}
buffer_cycling <- st_buffer(cyclingpath,
                              dist=5, nQuadSegs = 30)
```

We then want to calculate the area of the buffers

```{r}
buffer_cycling$AREA <- st_area(buffer_cycling)
```

We can then use `sum()` to derive the total land involved

```{r}
sum(buffer_cycling$AREA)
```

## Point-in-polygon count

### Scenario

A pre-school service group want to find out the numbers of pre-schools in each Planning Subzone. \### Solution We first want to find pre-schools located in each planning subzone using `st_intersects()` followed by `length()` to calculate the number of pre-schools within each planning subzone.

```{r}
mpsz3414$`PreSch Count`<- lengths(st_intersects(mpsz3414, preschool3414))
```

We can then check the summarised statistics of the `PreSch Count` field using `summary()`

```{r}
summary(mpsz3414$`PreSch Count`)
```

We can then list the planning subzone with the most number of pre-schools using `top_n()`

```{r}
top_n(mpsz3414, 1, `PreSch Count`)
```

### Scenario

We now want to calculate the density of pre-school by planning subzone \### Solution We can use `st_area()` to derive the area of each planning subzone

```{r}
mpsz3414$Area <- mpsz3414 %>%
  st_area()
```

We can now use `mutate()` to compute the density

```{r}
mpsz3414 <- mpsz3414 %>%
  mutate(`PreSch Density` = `PreSch Count`/Area * 1000000)
```

We can now view a summary of the pre-school density data that we have derived.

```{r}
summary(mpsz3414$`PreSch Density`)
```

# Exploratory Data Analysis (EDA)

To view the distribution of `PreSch Density`, we can plot a histogram using `hist()`

```{r}
hist(mpsz3414$`PreSch Density`)
```

We can further customise this using `ggplot2`

```{r}
ggplot(data=mpsz3414, 
       aes(x= as.numeric(`PreSch Density`)))+
  geom_histogram(bins=20, 
                 color="black", 
                 fill="light blue") +
  labs(title = "Are pre-school even distributed in Singapore?",
       subtitle= "There are many planning sub-zones with a single pre-school, on the other hand, \nthere are two planning sub-zones with at least 20 pre-schools",
      x = "Pre-school density (per km sq)",
      y = "Frequency")
```

We can also use `ggplot2` to plot a scatterplot showing the relationship between the density and count of pre-schools.

```{r}
ggplot(data=mpsz3414, 
       aes(y = `PreSch Count`, 
           x= as.numeric(`PreSch Density`)))+
  geom_point(color="black", 
             fill="light blue") +
  xlim(0, 40) +
  ylim(0, 40) +
  labs(title = "",
      x = "Pre-school density (per km sq)",
      y = "Pre-school count")
```
