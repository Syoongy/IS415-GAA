---
title: "Hands-on Exercise 3: 1st & 2nd Order Spatial Point Patterns Analysis Methods"
author: "Fan Syong Yue"
date: 08/27/24
date-modified: "last-modified"
execute:
  eval: true
  echo: true
  freeze: true
---

# 1st order

Spatial Point Pattern Analysis is the evaluation of the pattern or distribution, of a set of points on a surface. The point can represent events such as crime, traffic accident and disease onset, or business services (coffee and fastfood outlets) or facilities such as childcare and eldercare.

We will be using `spatstat` on this exercise to discover the spatial point processes of childecare centres in Singapore. Through this, we want to explore and answer the following questions:

1)  Are childcare centers in Singapore randomly distributed throughout the country?
2)  If not, where are the locations with a higher concentration of childcare centers?

## Packages

We will be using the following packages:

-   sf
-   spatstat
-   raster
-   maptools
-   tmap
-   tidyverse

As `maptools` was removed from the CRAN repository, we can only install it through an archived link.

```{r}
install.packages("maptools", repos = "https://packagemanager.posit.co/cran/2023-10-13")
```

We can now load the modules required

```{r}
pacman::p_load(tmap, sf, raster, spatstat, maptools, sp, tidyverse)
```

## Data

To answer these questions, we will be using the following datasets:

-   [Master Plan 2014 Subzone Boundary Data](https://beta.data.gov.sg/datasets/d_d14da225fccf921049ab64238ff473d9/view)
-   [Childcare Services](https://data.gov.sg/collections/2015/view) (GeoJSON)
-   CostalOutline from SLA

We first use `st_read()` to import all our into variables `mpsz_sf`,`childcare_sf`, `sg_sf`

```{r}
mpsz_sf <- st_read(dsn = "data", layer = "MP14_SUBZONE_WEB_PL")
```

```{r}
childcare_sf <- st_read("data/child-care-services-geojson.geojson") %>%
  st_transform( crs = 3414)
```

```{r}
sg_sf <- st_read(dsn = "data", layer = "CostalOutline")
```

We want all the data to be using the same projection system, thus, we have transformed our the childcare data to use `SVY21`.

## Data Wrangling

### Spatial

Now that we have all the data prepared, let's plot a simple graph using them.

```{r}
tm_shape(sg_sf) + tm_polygons() + tm_shape(mpsz_sf) +
  tm_polygons() + tm_shape(childcare_sf) + tm_dots()
```

For an interactive pin map, we can use the following code

```{r}
#tmap_mode('view')
#tm_shape(childcare_sf) + tm_dots()
#tmap_mode('plot')
```

### Geospatial

We first want to convert our data to `sp`'s Spatial\* class using `sf` `as_Spatial`

```{r}
childcare <- as_Spatial(childcare_sf)
mpsz <- as_Spatial(mpsz_sf)
sg <- as_Spatial(sg_sf)
```

We can then check the conversion

```{r}
childcare
```

```{r}
mpsz
```

```{r}
sg
```

#### Converting into generic sp format

As we are unable to convert directly into `ppp`, we should first convert into the generic sp format

```{r}
childcare_sp <- as(childcare, "SpatialPoints")
sg_sp <- as(sg, "SpatialPolygons")
```

We can then view the values

```{r}
childcare_sp
```

```{r}
sg_sp
```

#### Converting `sp` into `ppp`

```{r}
childcare_ppp <- as(childcare_sp, "ppp")
childcare_ppp
```

We can now plot `childcare_ppp` and examine the difference

```{r}
plot(childcare_ppp)
```

```{r}
summary(childcare_ppp)
```

From the above summary, we can see that there are duplicated points. In spatial point patterns analysis an issue of significant is the presence of duplicates. The statistical methodology used for spatial point patterns processes is based largely on the assumption that process are simple, that is, that the points cannot be coincident.

#### Duplicated Points

To confirm the presence of duplicates, we can run the following code

```{r}
any(duplicated(childcare_ppp))
```

To view which points are duplicated we can use the `multiplicity()` function

```{r}
multiplicity(childcare_ppp)
```

We only want to look at locations with \> 1 points. We can sum the total to find out how many points have duplicates.

```{r}
sum(multiplicity(childcare_ppp) > 1)
```

With this, we know that there are 128 duplicated points. We can also view these points through this code chunk.

```{r}
#tmap_mode('view')
#tm_shape(childcare) + 
  #tm_dots(alpha = 0.3, size = 0.05)
#tmap_mode('plot')
```

There are generally 3 ways to resolve the issue with duplicated points

1)  Deleting the duplicates. This however has the issue of deleting useful points
2)  Using *Jittering* to shift duplicated points so that they do not occupy the same space
3)  Attaching the duplicates to the patterns as "marks". We would then need analytical techniques that take into account those "marks"

We will be using the *Jittering* approach

```{r}
childcare_ppp <- rjitter(childcare_ppp,
                         retry = TRUE,
                         nsimm = 1,
                         drop = TRUE)
any(duplicated(childcare_ppp))
```

#### *Owin* object

Due to the importance of confining the analysis with a geographical area like the Singapore boundary while analysing spatial point patters, we can use an `owin` object from the `spatstat` package

```{r}
sg_owin <- as.owin(sg_sf)
```

We can then plot the `sg_owin` variable

```{r}
plot(sg_owin)
```

We should also view the summary

```{r}
summary(sg_owin)
```

As mentioned previously, we want to confine out analysis only to Singapore. To do that, let's combine `childcare_ppp` with `sg_owin`

```{r}
childcareSG_ppp = childcare_ppp[sg_owin]
summary(childcareSG_ppp)
```

And view the new plotted data

```{r}
plot(childcareSG_ppp)
```

## 1st Order Spatial Point Pattern Analysis

We will now explore how to perform 1st Order Spatial Point Pattern Analysis through the `spatstat` package. We will be focusing on 2 aspects of this.

1)  deriving **kernel density estimation (KDE)** layer for visualising and exploring the intensity of point processes
2)  performing **Confirmatory Spatial Point Patterns Analysis** by using **Nearest Neighbour** statistics

### Kernel Density Estimation (KDE)

#### Automatic bandwidth selection

The density() function from spatstat computes a kernal density for a given set of point events. We can use `diggle()` to automatically help us select a bandwith for computing kernel density

```{r}
kde_childcareSG_bw <- density(childcareSG_ppp, sigma = bw.diggle, edge = TRUE, kernel = "gaussian")
plot(kde_childcareSG_bw)
```

With the output range from 0 to 0.000035 which is way too small to comprehend due to `svy21` using meter as its default unit of measurement, we will need to rescale the values. To do this, we first need to retrieve the bandwith used

```{r}
bw <- bw.diggle(childcareSG_ppp)
bw
```

#### Rescaling KDE Values

We want to rescale our default unit of measurement to use ***km*** instead of ***m***

```{r}
childcareSG_ppp_km <- rescale(childcareSG_ppp, 1000, "km")
kde_childcareSG_bw <- density(childcareSG_ppp_km, sigma = bw.diggle, edge = TRUE, kernel = "gaussian")
plot(kde_childcareSG_bw)
```

Now we have an output with a legend that is easy to read.

### Other automatic bandwith methods

There are 3 other functions from `spatstat` that can be used aside from `diggle()`

1)  `bw.CvL()`
2)  `bw.scott()`
3)  `bw.ppl()`

#### Cronie and van Lieshout

```{r}
bw.CvL(childcareSG_ppp_km)
```

```{r}
kde_childcareSG_bw_CvL <- density(childcareSG_ppp_km, sigma =  bw.CvL, edge = TRUE, kernel = "gaussian")
```

#### Scott's Rule

```{r}
bw.scott(childcareSG_ppp_km)
```

```{r}
kde_childcareSG_bw_scott <- density(childcareSG_ppp_km, sigma =  bw.scott, edge = TRUE, kernel = "gaussian")
```

#### Likelihood Cross Validation

```{r}
bw.ppl(childcareSG_ppp_km)
```

```{r}
kde_childcareSG_bw_ppl <- density(childcareSG_ppp_km, sigma =  bw.ppl, edge = TRUE, kernel = "gaussian")
```

Now we can compare with `diggle()`

```{r}
par(mfrow=c(2,2))
par(mar = c(3,2,2,1))
plot(kde_childcareSG_bw, main = "bw.diggle")
plot(kde_childcareSG_bw_CvL, main = "bw.CvL")
plot(kde_childcareSG_bw_scott, main = "bw.scott")
plot(kde_childcareSG_bw_ppl, main = "bw.ppl")
```

### Other Kernel Methods

By default, the kernel method used in `density.ppp()` is gaussian. However, there are 3 other options

1)  Epanechnikov
2)  Quartic
3)  Dics

```{r}
par(mfrow = c(2,2))
par(mar = c(3,2,2,1))
plot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = "gaussian"), main = "Gaussian")
plot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = "epanechnikov"), main = "Epanechnikov")
plot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = "quartic"), main = "Quartic")
plot(density(childcareSG_ppp_km, sigma = bw.ppl, edge = TRUE, kernel = "disc"), main = "Disc")
```

### Fixed and Adaptive KDE

#### Computing using fixed bandwith

Since we want to use a bandwith of 600 meters, we will use a sigma value of 0.6 as `childcare_ppp.km` uses kilometers.

```{r}
kde_childcareSG_600 <- density(childcareSG_ppp_km, sigma = 0.6, edge = TRUE, kernel = "gaussian")
plot(kde_childcareSG_600)
```

#### Computing using adaptive bandwith

As the fixed bandwidth method is very sensitive to highly skew distribution of spatial point patterns over geographical units for example urban versus rural, we can use adaptive bandwith to alleviate this.

```{r}
kde_childcareSG_adaptive <- adaptive.density(childcareSG_ppp_km, method="kernel")
plot(kde_childcareSG_adaptive)
```

We can now compare both of them directly

```{r}
par(mfrow = c(1,2))
par(mar = c(3,2,2,1))
plot(kde_childcareSG_600, main = "Fixed bandwidth")
plot(kde_childcareSG_adaptive, main = "Adaptive bandwidth")
```

#### Converting KDE output into a grid object

We do this to make it suitable for mapping purposes

```{r}
gridded_kde_childcareSG_bw <- as.SpatialGridDataFrame.im(kde_childcareSG_bw)
spplot(gridded_kde_childcareSG_bw)
```

##### Converting into raster layer

We can further convert this into a raster layer

```{r}
kde_childcareSG_bw_raster <- raster(gridded_kde_childcareSG_bw)
kde_childcareSG_bw_raster
```

As the crs now reads **NA**, we want to convert it back to using EPSG3414

```{r}
projection(kde_childcareSG_bw_raster) <- CRS("+init=EPSG:3414")
kde_childcareSG_bw_raster
```

#### Visualising using `tmap`

We can now use the raster layer and display it in `tmap`

```{r}
tm_shape(kde_childcareSG_bw_raster) + 
  tm_raster("v", palette="viridis") +
  tm_layout(legend.position = c("right", "bottom"), frame = FALSE)
```

#### Comparing Spatial Point Patterns using KDE

We want to compare the KDE of Punggol, Tampines, Choa Chu Kang and Jurong West planning areas.

##### Extracting areas of interest

We first want to extract the areas that we are interested in

```{r}
pg <- mpsz_sf %>%
  filter(PLN_AREA_N == "PUNGGOL")
tm <- mpsz_sf %>%
  filter(PLN_AREA_N == "TAMPINES")
ck <- mpsz_sf %>%
  filter(PLN_AREA_N == "CHOA CHU KANG")
jw <- mpsz_sf %>%
  filter(PLN_AREA_N == "JURONG WEST")
```

We can plot the areas to check

```{r}
par(mfrow=c(2,2))
par(mar = c(3,2,2,1))
plot(pg, main = "Punggol")
plot(tm, main = "Tampines")
plot(ck, main = "Choa Chu Kang")
plot(jw, main = "Jurong West")
```

```{r}
par(mfrow=c(2,2))
par(mar = c(3,2,2,1))
plot(pg, main = "Punggol")
```

```{r}
plot(tm, main = "Tampines")
```

```{r}
plot(ck, main = "Choa Chu Kang")
```

```{r}
plot(jw, main = "Jurong West")
```

We now want to convert them into owin objects

```{r}
pg_owin <- as.owin(pg)
tm_owin <- as.owin(tm)
ck_owin <- as.owin(ck)
jw_owin <- as.owin(jw)
```

We also want to extract out the childcare centre points within each of the areas

```{r}
childcare_pg_ppp = childcare_ppp[pg_owin]
childcare_tm_ppp = childcare_ppp[tm_owin]
childcare_ck_ppp = childcare_ppp[ck_owin]
childcare_jw_ppp = childcare_ppp[jw_owin]
```
Rescale from m to km:

```{r}
childcare_pg_ppp.km = rescale(childcare_pg_ppp, 1000, "km")
childcare_tm_ppp.km = rescale(childcare_tm_ppp, 1000, "km")
childcare_ck_ppp.km = rescale(childcare_ck_ppp, 1000, "km")
childcare_jw_ppp.km = rescale(childcare_jw_ppp, 1000, "km")
```

Overlay the childcare centres over the area

```{r}
par(mfrow=c(2,2))
par(mar = c(3,2,2,1))
plot(childcare_pg_ppp.km, main="Punggol")
plot(childcare_tm_ppp.km, main="Tampines")
plot(childcare_ck_ppp.km, main="Choa Chu Kang")
plot(childcare_jw_ppp.km, main="Jurong West")
```

We now want to derive the bandwith using `diggle()`

```{r}
par(mfrow = c(2,2))
par(mar = c(3,2,2,1))
plot(density(childcare_pg_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
plot(density(childcare_ck_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=bw.diggle, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```

We can also use a fixed bandwith of 0.25km
```{r}
par(mfrow=c(2,2))
par(mar = c(3,2,2,1))
plot(density(childcare_pg_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Punggol")
plot(density(childcare_tm_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Tampines")
plot(density(childcare_ck_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Choa Chu Kang")
plot(density(childcare_jw_ppp.km, 
             sigma=0.25, 
             edge=TRUE, 
             kernel="gaussian"),
     main="Jurong West")
```

#### Nearest Neighbour Analysis
We want to perform the Clark-Evans test of aggregation:

-   H0: Random distribution of childcare centres

-   H1: Non-Random distribution of childcare centres

```{r}
clarkevans.test(childcareSG_ppp,
                correction = "none",
                clipregion = "sg_owin",
                alternative = c("clustered"),
                nsim = 99)
```

The R value from the above result indicates clustering, and as p \< 0.05, H0 can be rejected.

##### Test on Tampines
```{r}
clarkevans.test(childcare_tm_ppp,
                correction="none",
                clipregion=sg_owin,
                alternative=c("clustered"),
                nsim=99)
```
The R value from the above result indicates clustering, and as p \< 0.05, H0 can be rejected.

##### Test on Punggol

```{r}
clarkevans.test(childcare_pg_ppp,
                correction = "none",
                clipregion = "sg_owin",
                alternative = c("clustered"),
                nsim = 99)
```
As p \< 0.05, H0 can be rejected.

##### Test on Choa Chu Kang
```{r}
clarkevans.test(childcare_ck_ppp,
                correction = "none",
                clipregion = "sg_owin",
                alternative = c("clustered"),
                nsim = 99)
```
As p \> 0.05, H0 cannot be rejected.


##### Test on Jurong West
```{r}
clarkevans.test(childcare_jw_ppp,
                correction = "none",
                clipregion = "sg_owin",
                alternative = c("clustered"),
                nsim = 99)
```
As p \< 0.05, H0 can be rejected.
