---
title: "In-class Exercise 10"
author: "Fan Syong Yue"
date: 10/29/24
date-modified: 10/29/24
execute:
  eval: true
  echo: true
  freeze: true
---

```{r}
pacman::p_load(olsrr, ggstatsplot, sf, 
               tmap, tidyverse, gtsummary,
               performance, see, sfdep)
```

## Importing the data

```{r}
mpsz = st_read(dsn = "data/geospatial", layer = "MP14_SUBZONE_WEB_PL")
mpsz_svy21 <- st_transform(mpsz, 3414)
```

```{r}
condo_resale = read_csv("data/aspatial/Condo_resale_2015.csv")
condo_resale.sf <- st_as_sf(condo_resale,
                            coords = c("LONGITUDE", "LATITUDE"),
                            crs=4326) %>%
  st_transform(crs=3414)
```

Correlation matrix is an effective graphical method for checking if there are pair independent variables with high correlation.

```{r}
ggcorrmat(condo_resale[, 5:23])
```

```{r}
condo_mlr <- lm(formula = SELLING_PRICE ~ AREA_SQM + 
                  AGE	+ PROX_CBD + PROX_CHILDCARE + 
                  PROX_ELDERLYCARE + PROX_URA_GROWTH_AREA + 
                  PROX_HAWKER_MARKET	+ PROX_KINDERGARTEN	+ 
                  PROX_MRT	+ PROX_PARK	+ PROX_PRIMARY_SCH + 
                  PROX_TOP_PRIMARY_SCH + PROX_SHOPPING_MALL	+ 
                  PROX_SUPERMARKET + PROX_BUS_STOP + 
                  NO_Of_UNITS + FAMILY_FRIENDLY + 
                  FREEHOLD + LEASEHOLD_99YR, 
                data=condo_resale.sf)
summary(condo_mlr)
```

[**olsrr**](https://olsrr.rsquaredacademy.com/) provides a collection of very useful methods for building better multiple linear regression models:

```{r}
ols_regress(condo_mlr)
```

Stepwise regression is the step-by-step iterative construction of a regression model that involves the selection of independent variables to be used in a final model. It involves adding or removing potential explanatory variables in succession and testing for statistical significance after each iteration.

```{r}
condo_fw_mlr <- ols_step_forward_p(
  condo_mlr,
  p_val = 0.05,
  details = FALSE)
condo_fw_mlr
```

```{r}
#| fig-width: 12
#| fig-height: 10
plot(condo_fw_mlr)
```

```{r}
condo_bw_mlr <- ols_step_backward_p(
  condo_mlr,
  p_val = 0.05,
  details = FALSE)
condo_bw_mlr
```

```{r}
condo_sb_mlr <- ols_step_both_p(
  condo_mlr,
  p_val = 0.05,
  details = FALSE)
condo_sb_mlr
```

```{r}
condo_sb_mlr <- ols_step_both_p(
  condo_mlr,
  p_val = 0.05,
  details = FALSE)
condo_sb_mlr
```

```{r}
metric <- compare_performance(condo_mlr, 
                    condo_fw_mlr$model,
                    condo_bw_mlr$model,
                    condo_sb_mlr$model)
```

```{r}
metric$Name <- gsub(".*\\\\([a-zA-Z0-9_]+)\\\\, \\\\model\\\\.*", "\\1", metric$Name)
```

In the code chunk below, `plot()` of see package is used to plot a radar chart to compare the performance measures of the models.

```{r}
plot(metric)
```

The different indices are normalized and larger values indicate better model performance. Hence, points closer to the center indicate worse fit indices.

```{r}
#| fig-width: 10
#| fig-height: 8
#| echo: false
plot(metric)
```

## Visualising model parameters

```{r}
#| fig-height: 12
ggcoefstats(condo_sb_mlr$model,
            sort = "ascending")
```